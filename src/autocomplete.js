// autocomplete suggestions
export default function customCompletions(context) {
  let word = context.matchBefore(/\w*/);
  if (word.from == word.to && !context.explicit) return null;
  return {
    from: word.from,
    options: [
      // global constants
      { label: "CANVAS", type: "constant", info: "game canvas HTML element" },
      { label: "WIDTH", type: "variable", info: "width of the game screen" },
      { label: "HEIGHT", type: "variable", info: "height of the game screen" },
      {
        label: "TAPPED",
        type: "variable",
        info: "true when the game screen is tapped",
      },
      {
        label: "TAPPING",
        type: "variable",
        info: "true when the game screen is holding the mouse/touch",
      },
      { label: "TAPX", type: "variable", info: "position X of the tap" },
      { label: "TAPY", type: "variable", info: "position Y of the tap" },
      {
        label: "ELAPSED",
        type: "variable",
        info: "seconds since the game started",
      },
      { label: "FPS", type: "variable", info: "frames per second" },
      {
        label: "CENTERX",
        type: "variable",
        info: "middle X of the game screen",
      },
      {
        label: "CENTERY",
        type: "variable",
        info: "middle Y of the game screen",
      },
      {
        label: "CANVAS.ctx",
        type: "constant",
        info: "canvas rendering 2d context",
      },
      { label: "PI", type: "constant" },
      // global functions
      {
        label: "clear",
        type: "function",
        apply: "clear(",
        detail: "(color = null)",
        info: "clear the game screen",
      },
      {
        label: "cls",
        type: "function",
        apply: "cls(",
        detail: "(color = null)",
        info: "clear the game screen",
      },
      {
        label: "rect",
        type: "function",
        apply: "rect(",
        detail: "(x, y, width, height, color = 0)",
      },
      {
        label: "rectfill",
        type: "function",
        apply: "rectfill(",
        detail: "(x, y, width, height, color = 0)",
      },
      {
        label: "circ",
        type: "function",
        apply: "circ(",
        detail: "(x, y, radius, color = 0)",
      },
      {
        label: "circfill",
        type: "function",
        apply: "circfill(",
        detail: "(x, y, radius, color = 0)",
      },
      {
        label: "line",
        type: "function",
        apply: "line(",
        detail: "(x1, y1, x2, y2, color = 0)",
      },
      {
        label: "linestyle",
        type: "function",
        apply: "linestyle(",
        detail: "(lineWidth, lineJoin, lineDash)",
      },
      {
        label: "text",
        type: "function",
        apply: "text(",
        detail: "(x, y, text, color = 0, size = null, font = 'monospace')",
      },
      {
        label: "print",
        type: "function",
        apply: "print(",
        detail: "(x, y, text, color = 0, size = null, font = 'monospace')",
      },
      {
        label: "textalign",
        type: "function",
        apply: "textalign(",
        detail: "(align = 'left', baseline = 'top')",
      },
      {
        label: "textfont",
        type: "function",
        apply: "textfont(",
        detail: "(fontName)",
      },
      {
        label: "image",
        type: "function",
        apply: "image(",
        detail: "(x, y, image)",
      },
      {
        label: "paint",
        type: "function",
        apply: "paint(",
        detail: "(width, height, callback|array)",
        info: "Creates a offscreen canvas to draw on it",
      },
      {
        label: "transform",
        type: "function",
        apply: "transform(",
        detail: "(a, b, c, d, e, f, reset = true)",
      },
      {
        label: "translate",
        type: "function",
        apply: "translate(",
        detail: "(x, y)",
      },
      {
        label: "scale",
        type: "function",
        apply: "scale(",
        detail: "(x, y)",
      },
      {
        label: "rotate",
        type: "function",
        apply: "rotate(",
        detail: "(x, y)",
      },
      {
        label: "blendmode",
        type: "function",
        apply: "blendmode(",
        detail: "(mode)",
        info: "sets the type of compositing operation to apply when drawing new shapes",
      },
      {
        label: "push",
        type: "function",
        apply: "push()",
        detail: "",
        info: "save the rendering context",
      },
      {
        label: "pop",
        type: "function",
        apply: "pop()",
        detail: "",
        info: "restore the rendering context",
      },
      {
        label: "clip",
        type: "function",
        apply: "clip((ctx) =>",
        detail: "clip(callback: function)",
        info: "create a clipping region using a path",
      },
      {
        label: "sfx",
        type: "function",
        apply: "sfx(0)",
        detail: "(sound = 0, volume = 1, pitch = 0, randomness = 0)",
        info: "play a sound",
      },
      {
        label: "rand",
        type: "function",
        apply: "rand()",
        detail: "(min = 0.0, max = 1.0)",
        info: "get a pseudo-random float between min (inclusive) and max (exclusive)",
      },
      {
        label: "randi",
        type: "function",
        apply: "randi()",
        detail: "(min = 0, max = 1)",
        info: "get a pseudo-random integer between min (inclusive) and max (inclusive)",
      },
      {
        label: "clamp",
        type: "function",
        apply: "clamp(",
        detail: "(value, min, max)",
      },
      {
        label: "lerp",
        type: "function",
        apply: "lerp(",
        detail: "(start, end, t)",
        info: "linear interpolation from `start` to `end` over `t`%.",
      },
      {
        label: "deg2rad",
        type: "function",
        apply: "deg2rad(",
        detail: "(degrees)",
      },
      {
        label: "rad2deg",
        type: "function",
        apply: "rad2deg(",
        detail: "(radians)",
      },
      {
        label: "sin",
        type: "function",
        apply: "sin(",
        detail: "(radians)",
      },
      {
        label: "cos",
        type: "function",
        apply: "cos(",
        detail: "(radians)",
      },
      {
        label: "abs",
        type: "function",
        apply: "abs(",
        detail: "(value)",
      },
      {
        label: "colrect",
        type: "function",
        apply: "colrect(",
        detail: "(x1, y1, w1, h1, x2, y2, w2, h2)",
        info: "Check collision between 2 rectangles",
      },
      {
        label: "colcirc",
        type: "function",
        apply: "colcirc(",
        detail: "(x1, y1, r1, x2, y2, r2)",
        info: "Check collision between 2 circles",
      },
      {
        label: "plugin",
        type: "function",
        apply: "plugin(",
        detail: "(callback|object)",
        info: "Load a plugin to extend the litecanvas engine",
      },

      // asset loader plugin
      {
        label: "loadScript",
        type: "function",
        apply: "loadScript(",
        detail: "(url, callback)",
        info: "Load a JavaScript file",
      },
      {
        label: "loadImage",
        type: "function",
        apply: "loadImage(",
        detail: "(url, callback)",
        info: "Load a image",
      },
      {
        label: "loadFont",
        type: "function",
        apply: "loadFont(",
        detail: "(name, url, callback)",
        info: "Load a font",
      },
      {
        label: "LOADING",
        type: "variable",
        info: "return the amount of assets that are loading",
      },
    ],
  };
}
