# Litecanvas

> Litecanvas is a lightweight JavaScript HTML5 canvas engine suitable for small web games, prototypes, game jams, animations, creative programming and for learning game programming and game design. Litecanvas has no fancy interface, no visual helpers, no gui tools or editors... just coding.

## Introduction

### Basics

```js
litecanvas()

function update(dt) {
    // this functions is called 60 times per second
    // your game logic goes here
}

function draw() {
    // this functions is called 60 times per second
    // your game rendering goes here
}
```

### Set the width and height of the game screen

```js
// example: a game screen size equal to 320x240
litecanvas({
    width: 320,
    height: 240
})
```

### Colors

Litecanvas has a default palette with 12 colors:

| # | Color |
| --- | --- |
| 0 | Black |
| 1 | Dark grey |
| 2 | Light grey |
| 3 | White |
| 4 | Red |
| 5 | Yellow |
| 6 | Dark blue |
| 7 | Light blue |
| 8 | Dark green |
| 9 | Light green |
| 10 | Brown |
| 11 | Beige |

Each time a Litecanvas' function ask for a color, you should use an of theses colors by its index.

```js
// example: draw a white rectangle
color = 3
rectfill(0, 0, 32, 32, color)
```

### Hello World

```js
litecanvas()

function draw() {
    // clear and fill the game screen with black color
    cls(0)

    // print a red "Hello World" text at x=0, y=0
    text(0, 0, 'Hello World', 4)
}
```

### Click and Touch

```js
litecanvas()

let x, y

function tapped(tapX, tapY) {
    // this function is called when a short click or touch happens
    // tapX and tapY is where the tap happened
    x = tapX
    y = tapY
}

function draw() {
    cls(0)

    if (x !== undefined) {
        // draw a yellow circle
        circfill(x, y, 5)
    }
}
```

### Mouse cursor position

Use `MX` and `MY` variables (automatically declared by Litecanvas) to track the position of the mouse cursor.

### Keyboard

```js
litecanvas()

function update() {
    if (iskeydown('space')) {
        // checks if the spacebar key is down
    }

    if (iskeypressed('a')) {
        // checks if the "a" key was pressed
    }

    // Returns the last key pressed in your keyboard.
    const key = lastkey()

    console.log(key)
}
```

> Note: you can call `iskeydown` or `iskeypressed` without an argument, to check for any key.

### Functions for advanced drawings

```js
// save the current canvas drawing context state
push()

// restore the canvas drawing context state to the last saved state
pop()

// Adds a translation transformation to the current matrix
translate(x, y)

// Adds a scaling transformation to the canvas units
// horizontally (x) and/or vertically (y)
scale(sx, sy)

// Adds a rotation to the transformation matrix
rotate(radians)

// Sets the alpha (opacity) value to apply when drawing new shapes and images
// Use a value between 0 and 1
alpha(value)
```

### Variables declared by Litecanvas

Like `MX` and `MY`, Litecanvas also declares these other variables:

- `W`: the width of the game canvas
- `H`: the height of the game canvas
- `T`: the amount of seconds since the game started
- `PI`: approximately 3.14 radians (or 180 degrees)
- `TWO_PI`: approximately 6.28 radians (or 360 degrees)
- `HALF_PI`: approximately 1.57 radians (or 90 degrees)

## Useful links

- [Cheatsheet](https://litecanvas.js.org)
- [Github](https://github.com/litecanvas/game-engine)
